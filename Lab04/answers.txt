Alternatively, to compare items in the cart, instead of using Comparator, we can use the
Comparable interface and override the compareTo()method. You can refer to the Java docs to see the
information of this interface.
Suppose we are taking this Comparable interface approach.
- What class should implement the Comparable interface?
	Media

- In those classes, how should you implement the compareTo()method be to reflect the ordering that we
want?
	Like how I did with compare() of Comparator: first check the ordering by title, then by cost (for example 		COMPARE_MEDIA_TITLE_COST) 
	Code: public int compareTo(Media m) {
			if (cost - m.getCost() != 0) {
				return (int) Math.signum(cost - m.getCost());
			}
			return title.compareTo(m.getTitle());
	      }

- Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this
Comparable interface approach?
	No, we can't. Unless we change our code every time we want to change the ordering rule.

- Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing
length, then cost. How would you modify your code to allow this?
	I would let DVD implements Comparable and override the compareTo() method of DVD.